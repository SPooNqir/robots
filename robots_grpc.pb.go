// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc1 "gitlab.com/SpoonQIR/Cloud/services/groups.git/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RobotsClient is the client API for Robots service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RobotsClient interface {
	GetAll(ctx context.Context, in *Robots, opts ...grpc.CallOption) (*Robots, error)
	GetGraph(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*grpc1.Groups, error)
	Get(ctx context.Context, in *Robot, opts ...grpc.CallOption) (*Robot, error)
	GetByGroup(ctx context.Context, in *grpc1.Group, opts ...grpc.CallOption) (*Robots, error)
	GetSAFile(ctx context.Context, in *Robot, opts ...grpc.CallOption) (*SaFile, error)
	Add(ctx context.Context, in *Robot, opts ...grpc.CallOption) (*Robot, error)
	Update(ctx context.Context, in *Robot, opts ...grpc.CallOption) (*Robot, error)
	UpdateMacAddress(ctx context.Context, in *Robot, opts ...grpc.CallOption) (*Robot, error)
}

type robotsClient struct {
	cc grpc.ClientConnInterface
}

func NewRobotsClient(cc grpc.ClientConnInterface) RobotsClient {
	return &robotsClient{cc}
}

func (c *robotsClient) GetAll(ctx context.Context, in *Robots, opts ...grpc.CallOption) (*Robots, error) {
	out := new(Robots)
	err := c.cc.Invoke(ctx, "/grpc.robots/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotsClient) GetGraph(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*grpc1.Groups, error) {
	out := new(grpc1.Groups)
	err := c.cc.Invoke(ctx, "/grpc.robots/GetGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotsClient) Get(ctx context.Context, in *Robot, opts ...grpc.CallOption) (*Robot, error) {
	out := new(Robot)
	err := c.cc.Invoke(ctx, "/grpc.robots/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotsClient) GetByGroup(ctx context.Context, in *grpc1.Group, opts ...grpc.CallOption) (*Robots, error) {
	out := new(Robots)
	err := c.cc.Invoke(ctx, "/grpc.robots/GetByGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotsClient) GetSAFile(ctx context.Context, in *Robot, opts ...grpc.CallOption) (*SaFile, error) {
	out := new(SaFile)
	err := c.cc.Invoke(ctx, "/grpc.robots/GetSAFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotsClient) Add(ctx context.Context, in *Robot, opts ...grpc.CallOption) (*Robot, error) {
	out := new(Robot)
	err := c.cc.Invoke(ctx, "/grpc.robots/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotsClient) Update(ctx context.Context, in *Robot, opts ...grpc.CallOption) (*Robot, error) {
	out := new(Robot)
	err := c.cc.Invoke(ctx, "/grpc.robots/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotsClient) UpdateMacAddress(ctx context.Context, in *Robot, opts ...grpc.CallOption) (*Robot, error) {
	out := new(Robot)
	err := c.cc.Invoke(ctx, "/grpc.robots/UpdateMacAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RobotsServer is the server API for Robots service.
// All implementations must embed UnimplementedRobotsServer
// for forward compatibility
type RobotsServer interface {
	GetAll(context.Context, *Robots) (*Robots, error)
	GetGraph(context.Context, *emptypb.Empty) (*grpc1.Groups, error)
	Get(context.Context, *Robot) (*Robot, error)
	GetByGroup(context.Context, *grpc1.Group) (*Robots, error)
	GetSAFile(context.Context, *Robot) (*SaFile, error)
	Add(context.Context, *Robot) (*Robot, error)
	Update(context.Context, *Robot) (*Robot, error)
	UpdateMacAddress(context.Context, *Robot) (*Robot, error)
	mustEmbedUnimplementedRobotsServer()
}

// UnimplementedRobotsServer must be embedded to have forward compatible implementations.
type UnimplementedRobotsServer struct {
}

func (UnimplementedRobotsServer) GetAll(context.Context, *Robots) (*Robots, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedRobotsServer) GetGraph(context.Context, *emptypb.Empty) (*grpc1.Groups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGraph not implemented")
}
func (UnimplementedRobotsServer) Get(context.Context, *Robot) (*Robot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRobotsServer) GetByGroup(context.Context, *grpc1.Group) (*Robots, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByGroup not implemented")
}
func (UnimplementedRobotsServer) GetSAFile(context.Context, *Robot) (*SaFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSAFile not implemented")
}
func (UnimplementedRobotsServer) Add(context.Context, *Robot) (*Robot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedRobotsServer) Update(context.Context, *Robot) (*Robot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRobotsServer) UpdateMacAddress(context.Context, *Robot) (*Robot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMacAddress not implemented")
}
func (UnimplementedRobotsServer) mustEmbedUnimplementedRobotsServer() {}

// UnsafeRobotsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RobotsServer will
// result in compilation errors.
type UnsafeRobotsServer interface {
	mustEmbedUnimplementedRobotsServer()
}

func RegisterRobotsServer(s grpc.ServiceRegistrar, srv RobotsServer) {
	s.RegisterService(&Robots_ServiceDesc, srv)
}

func _Robots_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Robots)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotsServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.robots/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotsServer).GetAll(ctx, req.(*Robots))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robots_GetGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotsServer).GetGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.robots/GetGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotsServer).GetGraph(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robots_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Robot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.robots/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotsServer).Get(ctx, req.(*Robot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robots_GetByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotsServer).GetByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.robots/GetByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotsServer).GetByGroup(ctx, req.(*grpc1.Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robots_GetSAFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Robot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotsServer).GetSAFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.robots/GetSAFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotsServer).GetSAFile(ctx, req.(*Robot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robots_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Robot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.robots/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotsServer).Add(ctx, req.(*Robot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robots_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Robot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.robots/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotsServer).Update(ctx, req.(*Robot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robots_UpdateMacAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Robot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotsServer).UpdateMacAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.robots/UpdateMacAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotsServer).UpdateMacAddress(ctx, req.(*Robot))
	}
	return interceptor(ctx, in, info, handler)
}

// Robots_ServiceDesc is the grpc.ServiceDesc for Robots service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Robots_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.robots",
	HandlerType: (*RobotsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _Robots_GetAll_Handler,
		},
		{
			MethodName: "GetGraph",
			Handler:    _Robots_GetGraph_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Robots_Get_Handler,
		},
		{
			MethodName: "GetByGroup",
			Handler:    _Robots_GetByGroup_Handler,
		},
		{
			MethodName: "GetSAFile",
			Handler:    _Robots_GetSAFile_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Robots_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Robots_Update_Handler,
		},
		{
			MethodName: "UpdateMacAddress",
			Handler:    _Robots_UpdateMacAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "robots.proto",
}
